#ifndef _TEXTUREMAP_h
#define _TEXTUREMAP_h
#include <PCH/pch.h>
#include "stb_image.h"

struct TextureType {
	GLuint textureID;
	std::string type;
	int binds; //Keeps track of how many materials are currently using the same textureID.
};

struct Texture {
	GLuint textureID; //This is the gl id
	long long textureHash; //The texture has is the hash generated by the texturemap
	int refCount; //How many objects are currently using this texture
};

class TextureMap {
public:	
	static TextureMap* getInstance();

	void destroy();
	//Insert a new texture into the map of textures
	void insert(const std::string& textureName, const std::string& textureFile);
	
	const GLuint& getTextureID(const std::string& name);
	//Remove a specific texture
	void removeTexture(const std::string& name);
	//Remove all of the textures
	void cleanUp();

	//Dumps all of the texture data
	void dump();

private:
	TextureMap();
	~TextureMap();

	long long hash(const std::string& title);
	
	static TextureMap* m_textureMap;
	bool textureExists(const std::string& name);
	
	std::map<long long, Texture> m_textures;
};


#endif